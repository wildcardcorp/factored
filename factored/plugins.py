from yapsy.IPlugin import IPlugin
from yapsy.PluginManager import PluginManager
from yapsy.PluginFileLocator import PluginFileLocator
from yapsy.PluginFileLocator import PluginFileAnalyzerMathingRegex

import logging
logger = logging.getLogger("factored.plugins")


#
# plugin_dirs: list of directory paths where plugins should be searched for
#
def get_manager(plugin_dirs):
    analyzer = PluginFileAnalyzerMathingRegex("pyfiles", "^.*\.py$")
    filelocator = PluginFileLocator(analyzers=[analyzer])
    filelocator.setPluginPlaces(plugin_dirs)

    manager = PluginManager()
    manager.setPluginLocator(filelocator)
    manager.setCategoriesFilter({
        "finder": IFinderPlugin,
        "authenticator": IAuthenticatorPlugin,
        "registrar": IRegistrationPlugin,
        "template": ITemplatePlugin,
        "datastore": IDataStorePlugin,
    })
    manager.collectPlugins()

    return manager


#
# name_setting: configured setting that identifies the plugin by name,
#               eg "plugins.finder" for finder plugins. If "nolookup" is True,
#               then the name given in "name_setting" is considered the prefix
#               for the plugin settings.
# allsettings: all configured settings to search through for plugin specific stuff
#
def get_plugin_settings(name_setting, allsettings, nolookup=False):
    if nolookup:
        prefix = name_setting
    else:
        pname = allsettings.get(name_setting, None)
        if pname is None:
            logger.error("{pname} not configured".format(pname=name_setting))
            return None
        prefix = "plugin.{name}.".format(name=pname)
    setting_keys = [k for k in allsettings.keys() if k.startswith(prefix)]
    plugin_settings = {}
    for key in setting_keys:
        trimmed_key = key[len(prefix):]
        plugin_settings[trimmed_key] = allsettings[key]
    return plugin_settings


#
# IFinderPlugin's are used primarily in the factored.validator for the express
#   purpose of approving or denying the subject of a given token
#
class IFinderPlugin(IPlugin):
    #
    # settings: dict of key-value config specific to the plugin
    # sub: "subject" aka unique user identifier
    #
    # should return True/False if the "sub" value is a valid user
    #
    def is_valid_subject(self, settings, sub):
        raise NotImplemented()


#
# IAuthentictorPlugin's are used primarily in the factored.authenticator for
#   the purpose of providing different methods of 2FA -- IE by email, by sms,
#   by TOTP, and so on -- and (optionally) providing a way to request an
#   account.
#
class IAuthenticatorPlugin(IPlugin):
    #
    # returns a string that represents a name that would otherwise be displayed
    # to the user.
    #
    @property
    def display_name(self):
        raise NotImplemented()

    #
    # settings: dict of key-value config specific to the plugin
    # params: a dict of values from the combined GET and POST of the form
    # datastore: a IDataStorePlugin instance
    # finder: a IFinderPlugin instance
    #
    # returns a dict of values.
    #   - if the dict contains a key "authenticated" set to True, then the
    #     user has completed authentication and should have a jwt sent to them.
    #     In this case, there will also be a "subject" set to the users id.
    #   - if the dict DOES NOT contain "authenticated", then the dict is to be
    #     passed as the **kwargs of the render method call when 'template()'
    #     is rendered
    #
    def handle(self, settings, params, datastore, finder):
        raise NotImplemented()

    #
    # settings: dict of key-value config specific to the plugin
    # params: a dict of values to be used within the template, generated by the
    #         auth_handler method
    #
    def template(self, settings, params):
        return """{% extends "base.html" %}"""


class IRegistrationPlugin(IPlugin):
    #
    # settings: dict of key-value config specific to the plugin
    # params: a dict of values from the combined GET and POST of the form
    #
    # returns a dict of values to be passed as the 'params' of the
    #   registration_template method
    #
    # NOTE: reserved keys for the return dict are 'state' and 'auth_options',
    #       using either may cause unexpected issues.
    #
    def handle(self, settings, params, datastore, finder):
        raise NotImplemented()

    #
    # settings: dict of key-value config specific to the plugin
    # params: a dict of values to be used within the template, generated by the
    #         registration_handler method
    #
    def template(self, settings, params):
        return """{% extends "base.html" %}"""


#
# ITemplatePlugin's are used at the top level of the factored.authenticator to
#   provide the layout/base template of the system. It is expected that the
#   ITemplatePlugin provide some standard blocks for allowing IAuthenticatorPlugin
#   templates to be interfaced with the layout/base
#
class ITemplatePlugin(IPlugin):
    #
    # settings: dict of key-value config specific to the plugin
    # params: a dict of values to be used within the template, typically
    #         everything in the requests POST and GET, combined.
    #
    # returns a jinja2 template with blocks named 'title', 'head', and 'content'
    #
    # this template is referred to as "base.html" for extending/overriding
    # purposes in IAuthenticatorPlugin templates
    #
    def template(self, settings, params):
        raise NotImplemented()

#
# IDataStorePlugin's are used to interface with a data store of some type --
#   for example: an authenticator needs to be able to generate a code and
#   wait for a user to respond, so it needs to persist the request code for
#   until a certain amount of time passes.
#
class IDataStorePlugin(IPlugin):
    #
    # settings: dict of key-value config specific to the plugin
    #
    def initialize(self, settings):
        raise NotImplemented()

    #
    # subject: unique identity for the user/subject of the request
    # payload: string value that can be used to identify the access request later
    #
    # deletes any outstanding access requests for subject
    #
    def store_access_request(self, subject, timestamp, payload):
        raise NotImplemented()

    #
    # subject: unique identity for the user/subject of the request
    #
    # returns only the latest request if more than one exist
    #
    def get_access_request(self, subject):
        raise NotImplemented()

    #
    # subject: unique identity for the user/subject of the request
    #
    # deletes all access requests for the subject
    #
    def delete_access_requests(self, subject):
        raise NotImplemented()
