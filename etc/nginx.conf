
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #include /etc/nginx/conf.d/*.conf;

    lua_package_path "/opt/lua/?.lua;;";

    server {
        listen 80;
        location / {
            access_by_lua_block {
                local na = require("nginx_access");
                na.validate_auth("/auth/validator", "/auth/authenticator");
            }

            default_type text/html;
            content_by_lua_block {
                ngx.say("authorized");
            }
        }

        # note: "@" cannot be used due to limitations between the ability for
        # the lua plugin to interact with internal only locations
        location /auth/validator {
            internal;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # note the trailing slash
            proxy_pass http://fvalidator:6543/;
        }

        location /auth/authenticator {
            internal;

            #default_type text/html;
            #content_by_lua_block {
            #    ngx.req.read_body()
            #    ngx.say("NOT authorized");
            #    ngx.say(" -- but here is uri: "..ngx.var.request_uri)
            #    ngx.say(" -- and here is args: ")
            #    local args = ngx.req.get_uri_args()
            #    for key, val in pairs(args) do
            #        ngx.say("("..key..","..tostring(val)..")")
            #    end
            #}
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # note the trailing slash
            proxy_pass http://fauth:8000/;
        }
    }
}
